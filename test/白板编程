// 二叉树的前中后序遍历
public static class Node{
    int val;
    Node left;
    Node right;

    public Node(int data){
        this.val = data;
    }
}

// 递归
public static class preTravelsal(Node head){
    if(head == null) return;

    System.out.print(head.val + " ");
    preTravelsal(head.left);
    preTravelsal(head.right);
}

import java.util.Stack;
// 前序 非递归
public static class pre(Node head){
    if(head == null) return;

    Stack<Node> stack = new Stack<>();
    stack.push(head);
    while(!stack.isEmpty()){
        Node node = stack.pop();
        System.out.print(node.val + " ");
        if(node.right != null) stack.push(node.right);
        if(node.left != null) stack.push(node.left);
    }
}
// 中序非递归

    Stack<Node> stack = new Stack<>();
    stack.push(head)
    while(!stack.isEmpty() && head != null){
        if(head != null){
            stack.push(head);
            head = head.left;
        }else{
            Node node = stack.pop();
            sout(node.val + " ");
            node = node.left;

        }
    }

 // 后序非递归

public static class pre(Node head){
    if(head == null) return;

    Stack<Node> stack1 = new Stack<>();
    Stack<Node> stack2 = new Stack<>();
    stack.push(head);
    while(!stack.isEmpty()){
        Node node = stack.pop();
        stack2.push(node);
        if(node.right != null) stack.push(node.right);
        if(node.left != null) stack.push(node.left);
    }

    while(!stack2.isEmpty()){
        System.out.print(s2.pop().val + " ");
    }
}

// 后继节点
if(node.right != null){
     return getLeftMost(node.right);
}

Node parent = node.parent;
while(parent != null && parent.left != node){
    node = parent;
    parent = node.parent;
}


getLeftMost:
if(node == null) return null;
while(node!=null){
    node = node.left;
}
return node;

// 层序遍历
if(head == null) return null;

Queue<Node> queue  = new ArrayList<>();
List<Integer> res = new ArrayList<>();

queue.add(root);

while(!queue.isEmpty()){
    Node node = queue.poll();
    res.add(node.val);
    if(node.left != null) queue.add(node.left);
    if(node.right != null) queue.add(node.right);
}

return result;